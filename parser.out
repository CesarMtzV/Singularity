Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    TRUE
    STRING
    POWER
    POW
    COLON
    PI
    INPUT
    FALSE
    FLOAT
    CLASS
    INT
    BOOL
    OUTPUT

Grammar

Rule 0     S' -> programa
Rule 1     programa -> programa_1 bloque
Rule 2     programa_1 -> vars
Rule 3     programa_1 -> epsilon
Rule 4     bloque -> LCURLY bloque_1 RCURLY
Rule 5     bloque_1 -> estatuto bloque_1
Rule 6     bloque_1 -> epsilon
Rule 7     vars -> tipo_compuesto ID vars_1 SEMICOLON vars_4
Rule 8     vars -> tipo_simple ID vars_2
Rule 9     vars_1 -> COMMA
Rule 10    vars_1 -> epsilon
Rule 11    vars_2 -> LBRACKET VAR_CONST_INT RBRACKET vars_3 SEMICLON vars_4
Rule 12    vars_4 -> LBRACKET VAR_CONST_INT RBRACKET
Rule 13    vars_4 -> epsilon
Rule 14    tipo_simple -> int
Rule 15    tipo_simple -> float
Rule 16    tipo_simple -> bool
Rule 17    tipo_simple -> string
Rule 18    tipo_compuesto -> id
Rule 19    var_const -> VAR_CONST_INT
Rule 20    var_const -> VAR_CONST_FLOAT
Rule 21    var_const -> VAR_CONST_BOOl
Rule 22    var_const -> VAR_CONST_STRING
Rule 23    var_const -> id
Rule 24    funcion_void -> FUNCTION VOID ID LPAREN params RPAREN LCURLY vars bloque RETURN exp SEMICOLON RCURLY
Rule 25    funcion -> FUNCTION tipo_simple ID LPAREN params RPAREN LCURLY vars bloque RETURN exp SEMICOLON RCURLY
Rule 26    funcion_main -> main LPAREN RPAREN LCURLY bloque RCURLY
Rule 27    params -> tipo_simple id params_1
Rule 28    params_1 -> COMMA params
Rule 29    params_1 -> epsilon
Rule 30    estatuto -> asigna
Rule 31    estatuto -> llamada
Rule 32    estatuto -> lectura
Rule 33    estatuto -> escritura
Rule 34    estatuto -> condicion
Rule 35    estatuto -> ciclo_w
Rule 36    estatuto -> ciclo_f
Rule 37    asigna -> ID ASSIGN exp SEMICOLON
Rule 38    llamada -> ID LAPREN llamada_1 RPAREN SEMICOLON
Rule 39    llamada_1 -> llamada_2
Rule 40    llamada_1 -> epsilon
Rule 41    llamada_2 -> llamada llamada_3
Rule 42    llamada_3 -> COMMA llamada_2
Rule 43    llamada_3 -> epsilon
Rule 44    lectura -> input CIN variable SEMICOLON
Rule 45    escritura -> output escritura_1 SEMICLON
Rule 46    escritura_1 -> COUT escritura_2
Rule 47    escritura_2 -> exp escritura_3
Rule 48    escritura_3 -> escritura_1
Rule 49    escritura_3 -> epsilon
Rule 50    condicion -> IF LPAREN exp RPAREN LCURLY bloque RCURLY condicion_1
Rule 51    condicion_1 -> ELSE LCURLY bloque RCURLY
Rule 52    condicion_1 -> epsilon
Rule 53    ciclo_w -> WHILE LPAREN exp RPAREN LCURLY bloque RCURLY
Rule 54    ciclo_f -> FOR LPAREN ID IN RANGE LAPREN VAR_CONST_INT COMMA VAR_CONST_INT
Rule 55    variable -> ID variable_1
Rule 56    variable_1 -> LBRACKET exp RBRACKET variable_2
Rule 57    variable_2 -> LBRACKET exp RBRACKET variable_2
Rule 58    variable_2 -> epsilon
Rule 59    exp -> t_exp exp_1
Rule 60    exp_1 -> OR EXP
Rule 61    t_exp -> g_exp t_exp_1
Rule 62    t_exp_1 -> AND t_exp
Rule 63    g_exp -> m_exp g_exp_1
Rule 64    g_exp_1 -> g_exp_2 m_exp
Rule 65    g_exp_2 -> GREATER_THAN
Rule 66    g_exp_2 -> LESS_THAN
Rule 67    g_exp_2 -> GREATER_THAN_OR_EQUAL
Rule 68    g_exp_2 -> LESS_THAN_OR_EQUAL
Rule 69    g_exp_2 -> NOT_EQUAL
Rule 70    g_exp_2 -> EQUAL
Rule 71    m_exp -> t m_exp_1
Rule 72    m_exp_1 -> t m_exp_2 m_exp
Rule 73    m_exp_2 -> PLUS
Rule 74    m_exp_2 -> MINUS
Rule 75    t -> f t_1
Rule 76    t_1 -> t_2 t
Rule 77    t_2 -> MULTIPLY
Rule 78    t_2 -> DIVIDE
Rule 79    t_2 -> MOD
Rule 80    f -> f_1
Rule 81    f -> f_2
Rule 82    f -> f_3
Rule 83    f -> f_4
Rule 84    f_1 -> LPAREN exp RPAREN
Rule 85    f_2 -> const_i
Rule 86    f_2 -> const_f
Rule 87    f_2 -> const_b
Rule 88    f_2 -> const_s
Rule 89    f_3 -> variable
Rule 90    f_4 -> llamada
Rule 91    epsilon -> <empty>

Terminals, with rules where they appear

AND                  : 62
ASSIGN               : 37
BOOL                 : 
CIN                  : 44
CLASS                : 
COLON                : 
COMMA                : 9 28 42 54
COUT                 : 46
DIVIDE               : 78
ELSE                 : 51
EQUAL                : 70
FALSE                : 
FLOAT                : 
FOR                  : 54
FUNCTION             : 24 25
GREATER_THAN         : 65
GREATER_THAN_OR_EQUAL : 67
ID                   : 7 8 24 25 37 38 54 55
IF                   : 50
INPUT                : 
INT                  : 
LBRACKET             : 11 12 56 57
LCURLY               : 4 24 25 26 50 51 53
LESS_THAN            : 66
LESS_THAN_OR_EQUAL   : 68
LPAREN               : 24 25 26 50 53 54 84
MINUS                : 74
MOD                  : 79
MULTIPLY             : 77
NOT_EQUAL            : 69
OR                   : 60
OUTPUT               : 
PI                   : 
PLUS                 : 73
POW                  : 
POWER                : 
RBRACKET             : 11 12 56 57
RCURLY               : 4 24 25 26 50 51 53
RETURN               : 24 25
RPAREN               : 24 25 26 38 50 53 84
SEMICOLON            : 7 24 25 37 38 44
STRING               : 
TRUE                 : 
VAR_CONST_FLOAT      : 20
VAR_CONST_INT        : 11 12 19 54 54
VAR_CONST_STRING     : 22
VOID                 : 24
WHILE                : 53
error                : 

Nonterminals, with rules where they appear

EXP                  : 60
IN                   : 54
LAPREN               : 38 54
RANGE                : 54
SEMICLON             : 11 45
VAR_CONST_BOOl       : 21
asigna               : 30
bloque               : 1 24 25 26 50 51 53
bloque_1             : 4 5
bool                 : 16
ciclo_f              : 36
ciclo_w              : 35
condicion            : 34
condicion_1          : 50
const_b              : 87
const_f              : 86
const_i              : 85
const_s              : 88
epsilon              : 3 6 10 13 29 40 43 49 52 58
escritura            : 33
escritura_1          : 45 48
escritura_2          : 46
escritura_3          : 47
estatuto             : 5
exp                  : 24 25 37 47 50 53 56 57 84
exp_1                : 59
f                    : 75
f_1                  : 80
f_2                  : 81
f_3                  : 82
f_4                  : 83
float                : 15
funcion              : 
funcion_main         : 
funcion_void         : 
g_exp                : 61
g_exp_1              : 63
g_exp_2              : 64
id                   : 18 23 27
input                : 44
int                  : 14
lectura              : 32
llamada              : 31 41 90
llamada_1            : 38
llamada_2            : 39 42
llamada_3            : 41
m_exp                : 63 64 72
m_exp_1              : 71
m_exp_2              : 72
main                 : 26
output               : 45
params               : 24 25 28
params_1             : 27
programa             : 0
programa_1           : 1
string               : 17
t                    : 71 72 76
t_1                  : 75
t_2                  : 76
t_exp                : 59 62
t_exp_1              : 61
tipo_compuesto       : 7
tipo_simple          : 8 25 27
var_const            : 
variable             : 44 89
variable_1           : 55
variable_2           : 56 57
vars                 : 2 24 25
vars_1               : 7
vars_2               : 8
vars_3               : 11
vars_4               : 7 11

